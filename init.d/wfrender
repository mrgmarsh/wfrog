#! /bin/sh
### BEGIN INIT INFO
# Provides:          wfrender
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: wfrog renderer
# Description:       wfrog - Weather Station Software
### END INIT INFO

# Author: Laurent bovet <laurent.bovet@windmaster.ch>
# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin
NAME=wfrender
DESC="wfrog renderer - Weather Station Software "
RENDERER_DIR=/opt/wfrog/wfrender
RENDERER=wfrender.py
RENDERER_ARGS=
PIDFILE_RENDERER=/var/run/wfrender.pid
SCRIPTNAME=/etc/init.d/wfrender
CONFIG_FILE=/etc/wfrog/wfrender.conf

# Exit if the package is not installed
[ -x "$RENDERER_DIR/$RENDERER" ] || exit 0

[ -e "$CONFIG_FILE" ] && RENDERER_ARGS="$RENDERER_ARGS -f $CONFIG_FILE"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start_renderer()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --background --make-pidfile --pidfile $PIDFILE_RENDERER -d $RENDERER_DIR --exec $RENDERER_DIR/$RENDERER --test > /dev/null \
        || return 1
    start-stop-daemon --start  --background --make-pidfile --pidfile $PIDFILE_RENDERER -d $RENDERER_DIR --exec $RENDERER_DIR/$RENDERER -- $RENDERER_ARGS  \
        || return 2
}


#
# Function that stops the daemon/service
#
do_stop_renderer()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE_RENDERER --name $RENDERER
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    rm -f $PIDFILE
    return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start_renderer
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop_renderer
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop_renderer
    case "$?" in
      0|1)
        do_start_renderer
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
